{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\pro\\\\src\\\\main\\\\frontend\\\\src\\\\Components\\\\LoginForm.jsx\",\n    _s = $RefreshSig$();\n\nimport AuthenticationService from \"../Service/AuthenticationService\";\nimport Form from \"./Form\";\nimport { useState } from \"react\";\nimport \"../css/registrationForm.css\";\nimport { BrowserRouter, Navigate, useNavigate } from \"react-router-dom\";\nimport SuccessPage from \"./SuccessPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginForm = props => {\n  _s();\n\n  const navigate = useNavigate();\n  const userInfo = localStorage.getItem(\"user\");\n  let isAuthenticated = false;\n  if (userInfo !== null) isAuthenticated = true;\n  const [values, setValues] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const inputs = [{\n    id: 1,\n    name: \"username\",\n    type: \"text\",\n    placeholder: \"Имя пользователя\",\n    errorMessage: \"Пожалуйста, введите корректное имя пользователя.\",\n    label: \"Имя пользователя\",\n    pattern: \"^[A-Za-z0-9]{3,16}$\",\n    required: true\n  }, {\n    id: 2,\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Пароль\",\n    errorMessage: \"Пожалуйста, введите корректный пароль.\",\n    label: \"Пароль\",\n    pattern: `^(?=.*[0-9])(?=.*[a-zA-Z])[a-zA-Z0-9!@#$%^&*-]{8,20}$`,\n    required: true\n  }];\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // AuthenticationService.login(e.target.username.value, e.target.password.value).then((res) => {\n    //     navigate(\"/success\", { replace: true });\n    // });\n\n    const user = e.target.username.value;\n    const pass = e.target.password.value;\n    const response = await AuthenticationService.login(user, pass);\n    const roles = response.data;\n    localStorage.setItem(\"user\", JSON.stringify({\n      user,\n      pass,\n      roles\n    }));\n    console.log(localStorage.getItem(\"user\"));\n    navigate(\"/success\", {\n      replace: true\n    });\n  };\n\n  const onChange = e => {\n    setValues({ ...values,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/success\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 32\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      onChange: onChange,\n      inputs: inputs,\n      values: values,\n      title: \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\",\n      buttonTitle: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041D\\u0435\\u0442 \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442\\u0430?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      children: \"\\u0437\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u0443\\u0439\\u0442\\u0435\\u0441\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LoginForm, \"5FV/P+yMS5yUtTlOrnYYTwMfZhI=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["C:/Users/user/Downloads/pro/src/main/frontend/src/Components/LoginForm.jsx"],"names":["AuthenticationService","Form","useState","BrowserRouter","Navigate","useNavigate","SuccessPage","LoginForm","props","navigate","userInfo","localStorage","getItem","isAuthenticated","values","setValues","username","password","inputs","id","name","type","placeholder","errorMessage","label","pattern","required","handleSubmit","e","preventDefault","user","target","value","pass","response","login","roles","data","setItem","JSON","stringify","console","log","replace","onChange"],"mappings":"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","sourcesContent":["import AuthenticationService from \"../Service/AuthenticationService\";\r\nimport Form from \"./Form\";\r\nimport {useState} from \"react\";\r\nimport \"../css/registrationForm.css\";\r\nimport {BrowserRouter, Navigate, useNavigate} from \"react-router-dom\";\r\nimport SuccessPage from \"./SuccessPage\";\r\n\r\nconst LoginForm = (props) => {\r\n    const navigate = useNavigate();\r\n    const userInfo = localStorage.getItem(\"user\");\r\n    let isAuthenticated = false;\r\n    if(userInfo !== null) isAuthenticated = true;\r\n\r\n    const [values, setValues] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    });\r\n\r\n    const inputs = [\r\n        {\r\n            id: 1,\r\n            name: \"username\",\r\n            type: \"text\",\r\n            placeholder: \"Имя пользователя\",\r\n            errorMessage:\r\n                \"Пожалуйста, введите корректное имя пользователя.\",\r\n            label: \"Имя пользователя\",\r\n            pattern: \"^[A-Za-z0-9]{3,16}$\",\r\n            required: true,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"password\",\r\n            type: \"password\",\r\n            placeholder: \"Пароль\",\r\n            errorMessage:\"Пожалуйста, введите корректный пароль.\",\r\n            label: \"Пароль\",\r\n            pattern: `^(?=.*[0-9])(?=.*[a-zA-Z])[a-zA-Z0-9!@#$%^&*-]{8,20}$`,\r\n            required: true,\r\n        },\r\n    ];\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // AuthenticationService.login(e.target.username.value, e.target.password.value).then((res) => {\r\n        //     navigate(\"/success\", { replace: true });\r\n        // });\r\n        const user = e.target.username.value;\r\n        const pass = e.target.password.value;\r\n        const response = await AuthenticationService.login(user, pass);\r\n        const roles = response.data;\r\n        localStorage.setItem(\"user\", JSON.stringify({user, pass, roles}));\r\n        console.log(localStorage.getItem(\"user\"));\r\n        navigate(\"/success\", {replace: true});\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        setValues({ ...values, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    return ( isAuthenticated ? <Navigate to=\"/success\"/>:\r\n            <>\r\n                <Form onSubmit={handleSubmit}\r\n              onChange={onChange}\r\n              inputs={inputs}\r\n              values={values}\r\n              title=\"Авторизация\"\r\n              buttonTitle=\"Войти\">\r\n            </Form>\r\n                <div>Нет аккаунта?</div><a>зарегистрируйтесь</a>\r\n            </>\r\n    );\r\n};\r\n\r\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}